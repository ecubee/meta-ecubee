diff -ur openscenegraph/include/osg/BufferObject openscenegraphnew/include/osg/BufferObject
--- openscenegraph/include/osg/BufferObject	2011-06-14 11:15:12.000000000 +0200
+++ openscenegraphnew/include/osg/BufferObject	2011-08-18 08:42:12.000000000 +0200
@@ -81,8 +81,8 @@
         typedef long int GLintptr;
         typedef long int GLsizeiptr;
     #else
-        typedef int GLintptr;
-        typedef int GLsizeiptr;
+    //  typedef int GLintptr; //C,H: Double type declaration, used the declaration in driver
+    //  typedef int GLsizeiptr;
     #endif
 
     #define GL_STREAM_DRAW                    0x88E0
Only in openscenegraph/include: osgUtil
diff -ur openscenegraph/src/osg/State.cpp openscenegraphnew/src/osg/State.cpp
--- openscenegraph/src/osg/State.cpp	2011-06-14 16:48:27.000000000 +0200
+++ openscenegraphnew/src/osg/State.cpp	2011-08-18 14:22:10.000000000 +0200
@@ -70,9 +70,9 @@
     bool compactAliasing = true;
     if (compactAliasing)
     {
-        setUpVertexAttribAlias(_vertexAlias,0, "gl_Vertex","osg_Vertex","attribute vec4 ");
-        setUpVertexAttribAlias(_normalAlias, 1, "gl_Normal","osg_Normal","attribute vec3 ");
-        setUpVertexAttribAlias(_colorAlias, 2, "gl_Color","osg_Color","attribute vec4 ");
+        setUpVertexAttribAlias(_vertexAlias,0, "gl_Vertex","osg_Vertex","attribute highp vec4 ");
+        setUpVertexAttribAlias(_normalAlias, 1, "gl_Normal","osg_Normal","attribute highp vec3 ");
+        setUpVertexAttribAlias(_colorAlias, 2, "gl_Color","osg_Color","attribute highp vec4 ");
 
         _texCoordAliasList.resize(5);
         for(unsigned int i=0; i<_texCoordAliasList.size(); i++)
@@ -82,20 +82,20 @@
             gl_MultiTexCoord<<"gl_MultiTexCoord"<<i;
             osg_MultiTexCoord<<"osg_MultiTexCoord"<<i;
 
-            setUpVertexAttribAlias(_texCoordAliasList[i], 3+i, gl_MultiTexCoord.str(), osg_MultiTexCoord.str(), "attribute vec4 ");
+            setUpVertexAttribAlias(_texCoordAliasList[i], 3+i, gl_MultiTexCoord.str(), osg_MultiTexCoord.str(), "attribute highp vec4 ");
         }
 
-        setUpVertexAttribAlias(_secondaryColorAlias, 6, "gl_SecondaryColor","osg_SecondaryColor","attribute vec4 ");
-        setUpVertexAttribAlias(_fogCoordAlias, 7, "gl_FogCoord","osg_FogCoord","attribute float ");
+        setUpVertexAttribAlias(_secondaryColorAlias, 6, "gl_SecondaryColor","osg_SecondaryColor","attribute highp vec4 ");
+        setUpVertexAttribAlias(_fogCoordAlias, 7, "gl_FogCoord","osg_FogCoord","attribute highp float ");
 
     }
     else
     {
-        setUpVertexAttribAlias(_vertexAlias,0, "gl_Vertex","osg_Vertex","attribute vec4 ");
-        setUpVertexAttribAlias(_normalAlias, 2, "gl_Normal","osg_Normal","attribute vec3 ");
-        setUpVertexAttribAlias(_colorAlias, 3, "gl_Color","osg_Color","attribute vec4 ");
-        setUpVertexAttribAlias(_secondaryColorAlias, 4, "gl_SecondaryColor","osg_SecondaryColor","attribute vec4 ");
-        setUpVertexAttribAlias(_fogCoordAlias, 5, "gl_FogCoord","osg_FogCoord","attribute float ");
+        setUpVertexAttribAlias(_vertexAlias,0, "gl_Vertex","osg_Vertex","attribute highp vec4 ");
+        setUpVertexAttribAlias(_normalAlias, 2, "gl_Normal","osg_Normal","attribute highp vec3 ");
+        setUpVertexAttribAlias(_colorAlias, 3, "gl_Color","osg_Color","attribute highp vec4 ");
+        setUpVertexAttribAlias(_secondaryColorAlias, 4, "gl_SecondaryColor","osg_SecondaryColor","attribute highp vec4 ");
+        setUpVertexAttribAlias(_fogCoordAlias, 5, "gl_FogCoord","osg_FogCoord","attribute highp float ");
 
         _texCoordAliasList.resize(8);
         for(unsigned int i=0; i<_texCoordAliasList.size(); i++)
@@ -105,7 +105,7 @@
             gl_MultiTexCoord<<"gl_MultiTexCoord"<<i;
             osg_MultiTexCoord<<"osg_MultiTexCoord"<<i;
 
-            setUpVertexAttribAlias(_texCoordAliasList[i], 8+i, gl_MultiTexCoord.str(), osg_MultiTexCoord.str(), "attribute vec4 ");
+            setUpVertexAttribAlias(_texCoordAliasList[i], 8+i, gl_MultiTexCoord.str(), osg_MultiTexCoord.str(), "attribute highp vec4 ");
         }
     }
 
@@ -900,7 +900,11 @@
     if ( osg::getGLVersionNumber() >= 2.0 || osg::isGLExtensionSupported(_contextID,"GL_ARB_vertex_shader") || OSG_GLES2_FEATURES)
     {
         glGetIntegerv(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS,&_glMaxTextureUnits);
+		#ifdef OSG_GLES2_AVAILABLE
+        _glMaxTextureCoords = 1;
+		#else
         glGetIntegerv(GL_MAX_TEXTURE_COORDS,&_glMaxTextureCoords);
+		#endif
     }
     else if ( osg::getGLVersionNumber() >= 1.3 ||
                                  osg::isGLExtensionSupported(_contextID,"GL_ARB_multitexture") ||
@@ -1305,26 +1309,26 @@
         declPos = 0;
     }
 
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_Normal", "osg_Normal", "attribute vec3 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_Vertex", "osg_Vertex", "attribute vec4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_Color", "osg_Color", "attribute vec4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_SecondaryColor", "osg_SecondaryColor", "attribute vec4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_FogCoord", "osg_FogCoord", "attribute float ");
-
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord0", "osg_MultiTexCoord0", "attribute vec4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord1", "osg_MultiTexCoord1", "attribute vec4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord2", "osg_MultiTexCoord2", "attribute vec4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord3", "osg_MultiTexCoord3", "attribute vec4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord4", "osg_MultiTexCoord4", "attribute vec4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord5", "osg_MultiTexCoord5", "attribute vec4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord6", "osg_MultiTexCoord6", "attribute vec4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord7", "osg_MultiTexCoord7", "attribute vec4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_Normal", "osg_Normal", "attribute highp vec3 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_Vertex", "osg_Vertex", "attribute highp vec4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_Color", "osg_Color", "attribute highp vec4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_SecondaryColor", "osg_SecondaryColor", "attribute highp vec4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_FogCoord", "osg_FogCoord", "attribute highp float ");
+
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord0", "osg_MultiTexCoord0", "attribute highp vec4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord1", "osg_MultiTexCoord1", "attribute highp vec4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord2", "osg_MultiTexCoord2", "attribute highp vec4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord3", "osg_MultiTexCoord3", "attribute highp vec4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord4", "osg_MultiTexCoord4", "attribute highp vec4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord5", "osg_MultiTexCoord5", "attribute highp vec4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord6", "osg_MultiTexCoord6", "attribute highp vec4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_MultiTexCoord7", "osg_MultiTexCoord7", "attribute highp vec4 ");
 
     // replace built in uniform
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_ModelViewMatrix", "osg_ModelViewMatrix", "uniform mat4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_ModelViewProjectionMatrix", "osg_ModelViewProjectionMatrix", "uniform mat4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_ProjectionMatrix", "osg_ProjectionMatrix", "uniform mat4 ");
-    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_NormalMatrix", "osg_NormalMatrix", "uniform mat3 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_ModelViewMatrix", "osg_ModelViewMatrix", "uniform highp mat4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_ModelViewProjectionMatrix", "osg_ModelViewProjectionMatrix", "uniform highp mat4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_ProjectionMatrix", "osg_ProjectionMatrix", "uniform highp mat4 ");
+    State_Utils::replaceAndInsertDeclaration(source, declPos, "gl_NormalMatrix", "osg_NormalMatrix", "uniform highp mat3 ");
 
     OSG_INFO<<"-------- Converted source "<<std::endl<<source<<std::endl<<"----------------"<<std::endl;
 
diff -ur openscenegraph/src/osgText/Glyph.cpp openscenegraphnew/src/osgText/Glyph.cpp
--- openscenegraph/src/osgText/Glyph.cpp	2011-05-13 20:08:04.000000000 +0200
+++ openscenegraphnew/src/osgText/Glyph.cpp	2011-08-18 14:22:11.000000000 +0200
@@ -187,7 +187,9 @@
         case LINEAR_MIPMAP_LINEAR:
             if (generateMipMapSupported)
             {
+			#ifndef OSG_GLES2_AVAILABLE
                 glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP_SGIS,GL_TRUE);
+			#endif
             }
             else glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, LINEAR);
             break;
@@ -352,6 +354,10 @@
             delete [] local_data;
 
         }
+		
+		#ifdef OSG_GLES2_AVAILABLE
+        glGenerateMipmap(GL_TEXTURE_2D);
+		#endif
     }
     else
     {
diff -ur openscenegraph/src/osgText/Text.cpp openscenegraphnew/src/osgText/Text.cpp
--- openscenegraph/src/osgText/Text.cpp	2011-06-22 13:38:53.000000000 +0200
+++ openscenegraphnew/src/osgText/Text.cpp	2011-08-18 14:25:05.000000000 +0200
@@ -1211,12 +1211,12 @@
     unsigned int contextID = state.getContextID();
 
     state.applyMode(GL_BLEND,true);
-#if 1
+#if defined(OSG_GL_FIXED_FUNCTION_AVAILABLE)
+# if 1
     state.applyTextureMode(0,GL_TEXTURE_2D,osg::StateAttribute::ON);
-#else
+# else
     state.applyTextureMode(0,GL_TEXTURE_2D,osg::StateAttribute::OFF);
-#endif
-#if defined(OSG_GL_FIXED_FUNCTION_AVAILABLE)
+# endif
     state.applyTextureAttribute(0,getActiveFont()->getTexEnv());
 #endif
     if (_characterSizeMode!=OBJECT_COORDS || _autoRotateToScreen)
@@ -1350,12 +1350,12 @@
         }
     }    
 
-#if 1
+#if defined(OSG_GL_FIXED_FUNCTION_AVAILABLE)
+# if 1
     state.applyTextureMode(0,GL_TEXTURE_2D,osg::StateAttribute::ON);
-#else
+# else
     state.applyTextureMode(0,GL_TEXTURE_2D,osg::StateAttribute::OFF);
-#endif
-#if defined(OSG_GL_FIXED_FUNCTION_AVAILABLE)
+# endif
     state.applyTextureAttribute(0,getActiveFont()->getTexEnv());
 #endif
 
diff -ur openscenegraph/src/osgUtil/ShaderGen.cpp openscenegraphnew/src/osgUtil/ShaderGen.cpp
--- openscenegraph/src/osgUtil/ShaderGen.cpp	2011-04-19 12:40:22.000000000 +0200
+++ openscenegraphnew/src/osgUtil/ShaderGen.cpp	2011-08-18 15:01:53.000000000 +0200
@@ -134,10 +134,16 @@
     {
         vert << "varying vec3 viewDir;\n";
     }
+	
+    // PF: Front Color no defined. Diffuse component as a varying
+    vert <<    "varying highp vec4 glFrontColor;\n";
+    vert <<    "varying highp float diffuse;\n";
     
+	// PF: 
     // copy varying to fragment shader
     frag << vert.str();
 
+	vert <<    "attribute highp vec4 osg_Normal;\n";
     // write uniforms and attributes
     int unit = 0;
     if (stateMask & DIFFUSE_MAP)
@@ -151,9 +157,9 @@
     {
         osg::Uniform *normalMap = new osg::Uniform("normalMap", unit++);
         stateSet->addUniform(normalMap);
-        frag << "uniform sampler2D normalMap;\n";
+        frag << "uniform highp sampler2D normalMap;\n";
         program->addBindAttribLocation("tangent", 6);
-        vert << "attribute vec3 tangent;\n";
+        vert << "attribute highp vec3 tangent;\n";
     }
 
     vert << "\n"\
@@ -169,14 +175,14 @@
     if (stateMask & NORMAL_MAP)
     {
         vert << 
-            "  vec3 n = gl_NormalMatrix * gl_Normal;\n"\
-            "  vec3 t = gl_NormalMatrix * tangent;\n"\
-            "  vec3 b = cross(n, t);\n"\
-            "  vec3 dir = -vec3(gl_ModelViewMatrix * gl_Vertex);\n"\
+            "  highp vec3 n = gl_NormalMatrix * gl_Normal;\n"\
+            "  highp vec3 t = gl_NormalMatrix * tangent;\n"\
+            "  highp vec3 b = cross(n, t);\n"\
+            "  highp vec3 dir = -vec3(gl_ModelViewMatrix * gl_Vertex);\n"\
             "  viewDir.x = dot(dir, t);\n"\
             "  viewDir.y = dot(dir, b);\n"\
             "  viewDir.z = dot(dir, n);\n"\
-            "  vec4 lpos = gl_LightSource[0].position;\n"\
+            "  ihighp vec4 lpos = gl_LightSource[0].position;\n"\
             "  if (lpos.w == 0.0)\n"\
             "    dir = lpos.xyz;\n"\
             "  else\n"\
@@ -189,9 +195,9 @@
     {
         vert << 
             "  normalDir = gl_NormalMatrix * gl_Normal;\n"\
-            "  vec3 dir = -vec3(gl_ModelViewMatrix * gl_Vertex);\n"\
+            "  highp vec3 dir = -vec3(gl_ModelViewMatrix * gl_Vertex);\n"\
             "  viewDir = dir;\n"\
-            "  vec4 lpos = gl_LightSource[0].position;\n"\
+            "  highp vec4 lpos = gl_LightSource[0].position;\n"\
             "  if (lpos.w == 0.0)\n"\
             "    lightDir = lpos.xyz;\n"\
             "  else\n"\
@@ -201,11 +207,18 @@
     {
         vert << 
             "  viewDir = -vec3(gl_ModelViewMatrix * gl_Vertex);\n"\
-            "  gl_FrontColor = gl_Color;\n";
+            "  glFrontColor = gl_Color;\n";
     }
     else
     {
-        vert << "  gl_FrontColor = gl_Color;\n";
+        // PF: Just tested this case so far.... No textures, etc...
+        //vert << "  gl_FrontColor = gl_Color;\n";
+	// Add a light position and color as materials seems to be ignored
+	vert << "  highp vec3 lightPosition = vec3 (50.0, 100.0, -100.0);\n";
+        //vert << "  glFrontColor = vec4 (0.5, 0.5, 0.5, 1.0);\n";
+        vert << "  glFrontColor = gl_Color;\n";
+	vert << "  diffuse = max(dot(normalize (gl_ModelViewProjectionMatrix * osg_Normal), normalize(vec4(lightPosition, 1.0))), 0.0);\n";
+	// PF:
     }
     
     vert << "}\n";
@@ -216,44 +229,50 @@
 
     if (stateMask & DIFFUSE_MAP)
     {
-        frag << "  vec4 base = texture2D(diffuseMap, gl_TexCoord[0].st);\n";
+        frag << "  highp vec4 base = texture2D(diffuseMap, gl_TexCoord[0].st);\n";
     }
     else
     {
-        frag << "  vec4 base = vec4(1.0);\n";
+        frag << "  highp vec4 base = vec4(1.0);\n";
     }
 
     if (stateMask & NORMAL_MAP)
     {
-        frag << "  vec3 normalDir = texture2D(normalMap, gl_TexCoord[0].st).xyz*2.0-1.0;\n";
+        frag << "  highp vec3 normalDir = texture2D(normalMap, gl_TexCoord[0].st).xyz*2.0-1.0;\n";
     }
 
     if (stateMask & (LIGHTING | NORMAL_MAP))
     {
         frag << 
-            "  vec3 nd = normalize(normalDir);\n"\
-            "  vec3 ld = normalize(lightDir);\n"\
-            "  vec3 vd = normalize(viewDir);\n"\
-            "  vec4 color = gl_FrontLightModelProduct.sceneColor;\n"\
+            "  highp vec3 nd = normalize(normalDir);\n"\
+            "  highp vec3 ld = normalize(lightDir);\n"\
+            "  highp vec3 vd = normalize(viewDir);\n"\
+            "  highp vec4 color = gl_FrontLightModelProduct.sceneColor;\n"\
             "  color += gl_FrontLightProduct[0].ambient;\n"\
-            "  float diff = max(dot(ld, nd), 0.0);\n"\
+            "  highp float diff = max(dot(ld, nd), 0.0);\n"\
             "  color += gl_FrontLightProduct[0].diffuse * diff;\n"\
             "  color *= base;\n"\
             "  if (diff > 0.0)\n"\
             "  {\n"\
-            "    vec3 halfDir = normalize(ld+vd);\n"\
+            "    highp vec3 halfDir = normalize(ld+vd);\n"\ 
             "    color.rgb += base.a * gl_FrontLightProduct[0].specular.rgb * \n"\
             "      pow(max(dot(halfDir, nd), 0.0), gl_FrontMaterial.shininess);\n"\
             "  }\n";
     }
     else
     {
-        frag << "  vec4 color = base;\n";
+        frag << "  highp vec4 color = base;\n";
     }
 
     if (!(stateMask & LIGHTING))
     {
-        frag << "  color *= gl_Color;\n";
+        // PF: Calculate simple fragment color with some ambient light
+        //frag << "  color *= gl_Color;\n";
+        //frag << "  color *= gFrontColor;\n";
+        //frag << "  color *= diffuse;\n";
+        frag << "  highp vec4 amb = vec4 (1.0, 1.0, 1.0, 1.0);\n";
+        frag << "  color = amb * diffuse * glFrontColor;\n";
+        // PF:
     }
 
     if (stateMask & FOG)
diff -ur openscenegraph/src/osgViewer/GraphicsWindowX11.cpp openscenegraphnew/src/osgViewer/GraphicsWindowX11.cpp
--- openscenegraph/src/osgViewer/GraphicsWindowX11.cpp	2011-07-28 13:08:40.000000000 +0200
+++ openscenegraphnew/src/osgViewer/GraphicsWindowX11.cpp	2011-07-18 11:31:33.000000000 +0200
@@ -341,13 +341,15 @@
         #if defined(GLX_SAMPLE_BUFFERS) && defined (GLX_SAMPLES)
 
             if (_traits->sampleBuffers) { attributes.push_back(GLX_SAMPLE_BUFFERS); attributes.push_back(_traits->sampleBuffers); }
-            if (_traits->samples) { attributes.push_back(GLX_SAMPLES); attributes.push_back(_traits->samples); }
+            if (_traits->sampleBuffers) { attributes.push_back(GLX_SAMPLES); attributes.push_back(_traits->samples); }
 
         #endif
         // TODO
         //  GLX_AUX_BUFFERS
         //  GLX_ACCUM_RED_SIZE
         //  GLX_ACCUM_GREEN_SIZE
+        //  GLX_SAMPLE_BUFFERS
+        //  GLX_SAMPLES
 
         attributes.push_back(None);
 
@@ -728,8 +730,6 @@
 
         OSG_NOTICE<<"GraphicsWindowX11::init() - window created ="<<_valid<<std::endl;
 
-        eglBindAPI(EGL_OPENGL_ES_API);
-
         EGLConfig eglConfig = 0;
 
         #if defined(OSG_GLES2_AVAILABLE)
@@ -738,27 +738,19 @@
             #define OSG_EGL_OPENGL_TARGET_BIT EGL_OPENGL_ES_BIT
         #endif
 
-        typedef std::vector<EGLint> Attributes;
-        Attributes attributes;
-
-        attributes.push_back(EGL_RED_SIZE); attributes.push_back(_traits->red);
-        attributes.push_back(EGL_GREEN_SIZE); attributes.push_back(_traits->green);
-        attributes.push_back(EGL_BLUE_SIZE); attributes.push_back(_traits->blue);
-        attributes.push_back(EGL_DEPTH_SIZE); attributes.push_back(_traits->depth);
-
-        if (_traits->alpha) { attributes.push_back(EGL_ALPHA_SIZE); attributes.push_back(_traits->alpha); }
-        if (_traits->stencil) { attributes.push_back(EGL_STENCIL_SIZE); attributes.push_back(_traits->stencil); }
-
-        if (_traits->sampleBuffers) { attributes.push_back(EGL_SAMPLE_BUFFERS); attributes.push_back(_traits->sampleBuffers); }
-        if (_traits->samples) { attributes.push_back(EGL_SAMPLES); attributes.push_back(_traits->samples); }
-
-        attributes.push_back(EGL_RENDERABLE_TYPE); attributes.push_back(OSG_EGL_OPENGL_TARGET_BIT);
-        
-        attributes.push_back(EGL_NONE);
-        attributes.push_back(EGL_NONE);
+        EGLint configAttribs[] = {
+                EGL_SAMPLE_BUFFERS, 0,
+                EGL_SAMPLES, 0,
+                EGL_RED_SIZE, 1,
+                EGL_GREEN_SIZE, 1,
+                EGL_BLUE_SIZE, 1,
+                EGL_DEPTH_SIZE, 1,
+                EGL_RENDERABLE_TYPE, OSG_EGL_OPENGL_TARGET_BIT,
+                EGL_NONE
+        };
 
         int numConfigs;
-        if (!eglChooseConfig(_eglDisplay, &(attributes.front()), &eglConfig, 1, &numConfigs) || (numConfigs != 1))
+        if (!eglChooseConfig(_eglDisplay, configAttribs, &eglConfig, 1, &numConfigs) || (numConfigs != 1))
         {
             OSG_NOTICE<<"GraphicsWindowX11::init() - eglChooseConfig() failed."<<std::endl;
             XCloseDisplay( _display );
@@ -767,6 +759,7 @@
             return;
         }
 
+        eglBindAPI(EGL_OPENGL_ES_API);
 
         _eglSurface = eglCreateWindowSurface(_eglDisplay, eglConfig, (EGLNativeWindowType)_window, NULL);
         if (_eglSurface == EGL_NO_SURFACE)
